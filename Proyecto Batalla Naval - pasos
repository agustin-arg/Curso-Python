# Proyecto: Batalla Naval (Battleship) en Python

## Descripci√≥n del Proyecto
En este proyecto, crear√°s un juego de Batalla Naval (Battleship) en Python, donde dos jugadores colocan sus barcos en un tablero y se turnan para atacar las posiciones del oponente hasta que uno de los jugadores hunda todos los barcos del otro.

Este proyecto te permitir√° practicar:
- Manipulaci√≥n de listas
- Programaci√≥n orientada a objetos (clases y m√©todos)
- Gesti√≥n de la interacci√≥n entre m√∫ltiples clases
- L√≥gica de juegos

---

## Paso 1: Define la Clase Ship

### Objetivo
Crear la clase base `Ship` que representar√° todos los barcos del juego.

### Implementaci√≥n
```python
class Ship:
    def __init__(self, name, size):
        self.name = name
        self.size = size
        self.positions = []  # Lista vac√≠a para las posiciones del barco
        self.hits = 0        # Contador de impactos inicializado en 0
```

### M√©todos requeridos:

#### M√©todo `place_ship`
- **Prop√≥sito**: Coloca el barco en el tablero seg√∫n la posici√≥n inicial y direcci√≥n
- **Par√°metros**: `board`, `start_row`, `start_col`, `direction`
- **Funcionalidad**:
  - Verifica si el barco cabe en el tablero
  - Valida que las posiciones est√©n libres (' ')
  - Actualiza el tablero con el s√≠mbolo del barco (`self.name[0]`)
  - Almacena las posiciones en `self.positions`
  - Devuelve `True` si se coloca exitosamente, `False` en caso contrario

#### M√©todo `hit`
- **Prop√≥sito**: Registra un impacto en el barco
- **Funcionalidad**:
  - Incrementa `self.hits`
  - Devuelve `True` si el barco ha sido hundido (`self.hits == self.size`)

---

## Paso 2: Define Clases Espec√≠ficas de Barcos

### Subclases de Ship
Crea las siguientes clases que hereden de `Ship`:

```python
class Destroyer(Ship):
    def __init__(self):
        super().__init__('Destructor', 2)

class Submarine(Ship):
    def __init__(self):
        super().__init__('Submarino', 3)

class Battleship(Ship):
    def __init__(self):
        super().__init__('Acorazado', 4)
```

---

## Paso 3: Define la Clase Player

### Objetivo
Crear la clase `Player` que maneje la l√≥gica de cada jugador.

### Atributos iniciales
```python
class Player:
    def __init__(self, name):
        self.name = name
        self.board = [[' ' for _ in range(10)] for _ in range(10)]  # Tablero 10x10
        self.ships = []      # Lista de barcos del jugador
        self.hits = [[' ' for _ in range(10)] for _ in range(10)]  # Tablero de ataques
```

### M√©todos requeridos:

#### M√©todo `place_ships`
- Crea instancias de `Destroyer`, `Submarine` y `Battleship`
- Solicita al jugador la posici√≥n (fila, columna) y direcci√≥n (H/V)
- Usa `place_ship` para colocar cada barco
- Repite si la colocaci√≥n falla

#### M√©todo `print_board`
- Imprime el tablero actual del jugador
- Muestra las posiciones de los barcos o los impactos

#### M√©todo `attack`
- Solicita coordenadas de ataque al jugador
- Valida las coordenadas
- Verifica si es impacto o agua
- Actualiza los tableros correspondientes
- Verifica si el barco impactado ha sido hundido

#### M√©todo `all_ships_sunk`
- Devuelve `True` si todos los barcos han sido hundidos

---

## Paso 4: Define la Clase BattleshipGame

### Objetivo
Crear la clase principal que maneje la l√≥gica del juego completo.

```python
class BattleshipGame:
    def __init__(self):
        self.player1 = Player("Jugador 1")
        self.player2 = Player("Jugador 2")
```

### M√©todo `play`
**Flujo del juego**:
1. Solicita a cada jugador colocar sus barcos
2. Alterna turnos entre jugadores para atacar
3. Verifica condiciones de victoria despu√©s de cada ataque
4. Declara ganador cuando todos los barcos de un jugador sean hundidos

---

## Paso 5: Ejecuta el Juego

### C√≥digo principal
```python
# Crear instancia del juego e iniciar
game = BattleshipGame()
game.play()
```

---

## Caracter√≠sticas del Juego Final

### Funcionalidades
- ‚úÖ Tableros de 10x10 para cada jugador
- ‚úÖ Tres tipos de barcos con diferentes tama√±os
- ‚úÖ Colocaci√≥n manual de barcos por cada jugador
- ‚úÖ Sistema de turnos alternados
- ‚úÖ Detecci√≥n de impactos y barcos hundidos
- ‚úÖ Condici√≥n de victoria autom√°tica

### Elementos de aprendizaje
- **Programaci√≥n Orientada a Objetos**: Clases, herencia, m√©todos
- **Estructuras de datos**: Listas bidimensionales, listas de objetos
- **L√≥gica de juegos**: Turnos, validaciones, condiciones de victoria
- **Interacci√≥n con usuario**: Input/output, validaci√≥n de datos

---

## ¬°Divi√©rtete creando tu propio juego de Batalla Naval! üö¢‚öì
